// this module uses karnaugh maps to produce the hex signals.
module hexdecoder_k(in4, out7);
	input [3:0] in4;
	wire q, w, e, r;
	assign q = in4[3];
	assign w = in4[2];
	assign e = in4[1];
	assign r = in4[0];

	output [6:0] out7;

	assign out7[0] = !q && !w && !e && r || !q && w && !e && !r || q && w && !e && r || q && !w && e && r;
	assign out7[1] = !q && w && !e && r || q && w && !r || w && e && !r || q && w && e || q && e && r;
	assign out7[2] = !q && !w && e && !r || q && w && e || q && w && !r;
	assign out7[3] = !q && w && !e && !r || !w && !e && r || w && e && r || q && w && e && r;
	assign out7[4] = !w && !e && r || !q && w && !e || !q && r;
	assign out7[5] = !q && !w && r|| !q && e && r || !q && !w && e || q && w && !e && r;
	assign out7[6] = !q && !w && !e || !q && w && e && r || q && w && !e && !r;
endmodule

// this module is just a hardcoded mapping.
module hexdecoder(in4, out7);
	input [3:0] in4;
	output reg [6:0] out7;
	always @(*)
		begin
			case( in4[3:0] )
				4'b0000: out7[6:0] = 7'b1000000;
				4'b0001: out7[6:0] = 7'b1111001;
				4'b0010: out7[6:0] = 7'b0100100;
				4'b0011: out7[6:0] = 7'b0110000;
				4'b0100: out7[6:0] = 7'b0011001;
				4'b0101: out7[6:0] = 7'b0010010;
				4'b0110: out7[6:0] = 7'b0000010;
				4'b0111: out7[6:0] = 7'b1111000;
				4'b1000: out7[6:0] = 7'b0000000;
				4'b1001: out7[6:0] = 7'b0010000;
				4'b1010: out7[6:0] = 7'b0001000;
				4'b1011: out7[6:0] = 7'b0000011;
				4'b1100: out7[6:0] = 7'b1000110;
				4'b1101: out7[6:0] = 7'b0100001;
				4'b1110: out7[6:0] = 7'b0000110;
				4'b1111: out7[6:0] = 7'b0001110;
				default: out7[6:0] = 7'b1000000;
		end
	end
endmodule